package stock_demo.stock.model;


import lombok.*;
//
//@AllArgsConstructor
//@NoArgsConstructor
//@Setter
//@Getter
//@Builder
public class Stock {

    private String name;


    private double openPrice;
    private double highPrice;
    private double lowPrice;
    private double roe;
    private double peRatio;
    private double pbRatio;
    private double industryPeRatio;
    private double marketCap;
    private double revenue;
    private double profit;
    private double networthPerShare;
    private double annualGrowthPercentage;


    //getter and setter


    // Constructor using builder
    private Stock(Builder builder) {
        this.name = builder.name;
        this.openPrice = builder.openPrice;
        this.highPrice = builder.highPrice;
        this.lowPrice = builder.lowPrice;
        this.roe = builder.roe;
        this.peRatio = builder.peRatio;
        this.pbRatio = builder.pbRatio;
        this.industryPeRatio = builder.industryPeRatio;
        this.marketCap = builder.marketCap;
        this.revenue = builder.revenue;
        this.profit = builder.profit;
        this.networthPerShare = builder.networthPerShare;
        this.annualGrowthPercentage = builder.annualGrowthPercentage;
    }




    public static class Builder {
        private String name;
        private double openPrice;
        private double highPrice;
        private double lowPrice;
        private double roe;
        private double peRatio;
        private double pbRatio;
        private double industryPeRatio;
        private double marketCap;
        private double revenue;
        private double profit;
        private double networthPerShare;
        private double annualGrowthPercentage;


       //getter and setter
	   
        /*
        * public Stock build(){ return new Stock(name, openPrice, highPrice, lowPrice,
        * roe, peRatio, pbRatio, industryPeRatio); }
        * */
        public Stock build(){return new Stock(this);}

        public Builder highPrice(double highPrice){
            this.highPrice =highPrice;
            return this;
        }

    }
}



public class OrderService {

    private ExecutorService executorService;

    public OrderService() {
        this.executorService = Executors.newFixedThreadPool(10);
    }

    public void placeOrder(Runnable orderTask) {
        executorService.submit(orderTask);
    }

    public void shutdown() {
        executorService.shutdown();
    }
}

public class StockServices {
    public List<Stock> getTopThreeStocksByPrice(List<Stock> stocks) {
        return stocks.stream().sorted
        (Comparator.comparingDouble(Stock::getHighPrice)
                .reversed()).limit(3).collect(Collectors.toList());
    }

//    Implement other method for Q2-Q9

    public List<Stock> getStockRecommendation(List<Stock> stocks) {
        return stocks.stream()
                .sorted(Comparator.comparing(Stock::getRoe)
                        .reversed()
                        .thenComparing(Stock::getPeRatio)
                        .thenComparing(Stock::getPbRatio)
                        .thenComparing(Stock::getIndustryPeRatio))
                .collect(Collectors.toList());
    }

    public void calculateAdditionalMatrics(List<Stock> stocks) {
        for (Stock stock : stocks){
            double marketCap = stock.getOpenPrice() * stock.getRevenue(); // ExamplaeCalculation
            stock.getMarketCap(); //Assign calculated value to stock
            stock.getAnnualGrowthPercentage(); //Example calculation
            System.out.println("marketCap..." + marketCap);
        }
    }

    public int[] calculateShareToBuyAndSell(Stock stock){
        double buyPriceIncrement = stock.getOpenPrice() * 0.01;
        double sellPriceDecrement = stock.getOpenPrice() * -0.01;

        int buyShares = (int) (stock.getLowPrice() / buyPriceIncrement);
        int sellShares = (int) (stock.getHighPrice() / sellPriceDecrement);
        return new int[]{ buyShares, sellShares};
    }

    public List<Stock> categorizeStocks (List<Stock> stocks) {
        List<Stock> highReturnStocks = stocks.stream()
                .filter(stock -> stock.getRoe()>15)        //Example Criteria
                        .collect(Collectors.toList());
        List<Stock> lowReturnStocks = stocks.stream()
                .filter(stock -> stock.getRoe() <=15)       //Example Criteria
                .collect(Collectors.toList());
        highReturnStocks.addAll(lowReturnStocks);
        return highReturnStocks;
    }

}

public class CSVReader {

    public List<Stock> readStocksFromSCV(String filePath) throws IOException{
        List<Stock> stocks = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null){
                String[] values = line.split(",");
                Stock stock =new Stock.Builder().setName(values[0])
                        .setOpenPrice(Double.parseDouble(values[1]))
                        .setHighPrice(Double.parseDouble(values[2]))
                        .setLowPrice(Double.parseDouble(values[3]))
                        .setRoe(Double.parseDouble(values[4]))
                        .setPeRatio(Double.parseDouble(values[5]))
                        .setPbRatio(Double.parseDouble(values[6]))
                        .setIndustryPeRatio(Double.parseDouble(values[7]))
                        .setMarketCap(Double.parseDouble(values[8]))
                        .setRevenue(Double.parseDouble(values[9]))
                        .setProfit(Double.parseDouble(values[10]))
                        .setNetworthPerShare(Double.parseDouble(values[11]))
                        .setAnnualGrowthPercentage(Double.parseDouble(values[12]))
                        .build();
                stocks.add(stock);
            }
        }
        return stocks;
    }
}

public class CSVReaderSingleTon {

    private static CSVReaderSingleTon instance;

    private CSVReaderSingleTon(){

    }

    public static CSVReaderSingleTon getInstance(){
        if (instance==null){
            instance=new CSVReaderSingleTon();
        }
        return instance;
    }

    public List<Stock> readStock(String filepath) throws IOException{
        return  new CSVReader().readStocksFromSCV(filepath);
    }
}

public class DatabaseUtil {

    private static final String JDBC_URL= "jdbc:h2:mem:testdb";
    private static final String USER = "sa";
    private static final String PASSWORD ="";

    public static Connection getConnection() throws SQLException{
        return DriverManager.getConnection(JDBC_URL, USER, PASSWORD);
    }

    public static void crateTables() throws SQLException{

        try(Connection conn = getConnection(); Statement stmt = conn.createStatement()){
            String createTableSQL = "CREATE TABLE STOCK (" + "ID INT PRIMARY KEY AUTO_INCREMENT, "
                    + "NAME VARCHAR(255), " + "OPEN_PRICE DOUBLE, "
                    + "HIGH_PRICE DOUBLE, " + "LOW_PRICE DOUBLE, "
                    + "ROE DOUBLE, " + "PE_RATIO DOUBLE, "
                    + "PB_RATIO DOUBLE, " + "INDUSTRY_PE_RATIO_DOUBLE, "
                    + "MARKET_CAP DOUBLE, " + "REVENUE DOUBLE, "
                    + "PROFIT DOUBLE, " + "NETWORTH_PER_SHARE DOUBLE)" ;
            stmt.execute(createTableSQL);
        }
    }

    public static void insertStock(Stock stock) throws SQLException {
        String insertSQL = "INSERT INTO STOCK (NAME, OPEN_PRICE, HIGH_PRICE, LOW_PRICE, ROE, PE_RATIO, PB_RATIO, INDUSTRY_PE_RATIO, REVENUE, PROFIT, NETWORTH_PER_SHARE) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try(Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(insertSQL)){
            pstmt.setString(1, stock.getName());
            pstmt.setDouble(2, stock.getOpenPrice());
            pstmt.setDouble(3, stock.getHighPrice());
            pstmt.setDouble(4, stock.getLowPrice());
            pstmt.setDouble(5, stock.getRoe());
            pstmt.setDouble(6, stock.getPeRatio());
            pstmt.setDouble(7, stock.getPbRatio());
            pstmt.setDouble(8, stock.getIndustryPeRatio());
            pstmt.setDouble(9, stock.getMarketCap());
            pstmt.setDouble(10, stock.getRevenue());
            pstmt.setDouble(11, stock.getProfit());
            pstmt.setDouble(12, stock.getNetworthPerShare());
            pstmt.executeUpdate();
        }
    }
}
@RequiredArgsConstructor
public class StocksServiceTests {

    private final StockServices stockServices;
    public void testGetTopThreeStocksByPrice() {
        Stock stock1 = new Stock.Builder().setName("A").setHighPrice(150).build();
        Stock stock2 = new Stock.Builder().setName("B").setHighPrice(180).build();
        Stock stock3 = new Stock.Builder().setName("C").setHighPrice(160).build();
        Stock stock4 = new Stock.Builder().setName("D").setHighPrice(170).build();
        Stock stock5 = new Stock.Builder().setName("E").setHighPrice(190).build();

        List<Stock> stocks = Arrays.asList(stock1, stock2, stock3, stock4, stock5);
        List<Stock> topThree = stockServices.getTopThreeStocksByPrice(stocks);

        assertEquals(3, topThree.size());
        assertEquals("D", topThree.get(0).getName());
        assertEquals("B", topThree.get(1).getName());
        assertEquals("C", topThree.get(2).getName());
        assertEquals("E", topThree.get(3).getName());
    }

how to enhance my code with remove dependancies and make different claasses
give me updated code with comments

